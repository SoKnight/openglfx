import org.gradle.internal.os.OperatingSystem

tasks.register('compile') {
    group 'compilation'
    doLast {
        def libBaseName = "openglfx"
        OperatingSystem os = OperatingSystem.current()

        if (os.isLinux()) {
            file('build').mkdirs()
            execute("cmake ..", file("build"))
            execute("cmake --build ./", file("build"))
        } else if (os.isWindows()) {
            file('x64').mkdirs()
            file('x86').mkdirs()
            file('lib').mkdirs()

            execute("cmake -A \"Win32\" ../ -D X86=1", file("x86"))
            execute("cmake --build . --config MinSizeRel", file("x86"))

            execute("cmake -A \"x64\" ../ -D X64=1", file("x64"))
            execute("cmake --build . --config MinSizeRel", file("x64"))

            copy {
                from "x64/MinSizeRel/${libBaseName}-x64.dll"
                into "lib"
            }
            copy {
                from "x86/MinSizeRel/${libBaseName}-x86.dll"
                into "lib"
            }
        } else if (os.isMacOsX()) {
            file('build').mkdirs()
            execute("cmake ../ -DCMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\"", file("build"))
            execute("cmake --build ./", file("build"))
        } else throw new Exception("Unsupported OS")
    }
}

void execute(String command, File directory = file("./")){
    if(OperatingSystem.current().isMacOsX()){
        def shFile = new File(directory, "compile_script.sh")
        shFile.text = "#!/bin/sh\n" + command
        Runtime.getRuntime().exec("chmod +x ${shFile.path}").waitFor()
        command = "${shFile}"
    }

    def process = Runtime.getRuntime().exec(command, null, directory)
    BufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()))
    String line
    while ((line = r.readLine()) != null)
        println(line)
    if(process.waitFor() != 0)
        throw new GradleException("Execution of '$command' finished with exit code: ${process.exitValue()}")
}
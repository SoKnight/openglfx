import java.nio.file.*
import static java.nio.file.StandardCopyOption.*
import org.gradle.internal.os.OperatingSystem
import java.util.stream.Collectors

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
}

allprojects {
    version = "2.8"
}

repositories {
    mavenCentral()
}

group 'com.huskerdev.openglfx'

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

task compileJar {
    group 'release'
    doLast {
        Path out = Paths.get("$projectDir/build/libs")
        if(Files.exists(out.parent)) {
            Files.walk(out.parent)
                    .sorted(Comparator.reverseOrder())
                    .map { it.toFile() }
                    .forEach { it.delete() }
        }
        Files.createDirectory(out.parent)
        Files.createDirectory(out)

        Files.copy(Paths.get("$projectDir/core/build/libs/core-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-core-${version}.jar"), REPLACE_EXISTING)
        Files.copy(Paths.get("$projectDir/lwjgl/build/libs/lwjgl-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-lwjgl-${version}.jar"), REPLACE_EXISTING)
        Files.copy(Paths.get("$projectDir/jogl/build/libs/jogl-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-jogl-${version}.jar"), REPLACE_EXISTING)
    }
}
compileJar.dependsOn 'core:jar'
compileJar.dependsOn 'lwjgl:jar'
compileJar.dependsOn 'jogl:jar'


task compileWinNatives() {
    group "release"

    doLast {
        if(OperatingSystem.current().windows) {
            // Uses 'msbuild' to compile project
            // and 'vswhere' to find msbuild.exe
            String msbuildPath = runCommand("${projectDir}\\core\\src\\main\\native\\vswhere.exe -latest -requires Microsoft.Component.MSBuild -find MSBuild\\**\\Bin\\MSBuild.exe").text
            println("Compiling windows natives:")
            for (i in ["x86", "x64", "ARM64"]) {
                ConsoleOutput output = runCommand("\"${msbuildPath}\" \"${projectDir}\\core\\src\\main\\native\\openglfx\\openglfx.sln\" /t:Build /nologo /p:Configuration=Release;Platform=$i;RunCodeAnalysis=False")

                String status
                if(output.code != 0){
                    if(output.text.contains("error MSB4126"))
                        status = "NO MODULE"
                    else status = "ERROR"
                }else status = "OK"

                println("\t- $i${repeat(".", 15 - i.length())}[${status}]")
            }
        }
    }
}

static String repeat(String str, int count){
    return new String(new char[count]).replace("\0", str);
}

ConsoleOutput runCommand(String command, String context = null){
    String suffix = (OperatingSystem.current().windows && command.contains("&&")) ? "cmd /c " : ""

    Process p
    if(context != null)
        p = Runtime.runtime.exec("${suffix}${command}", new String[0], file(context))
    else
        p = Runtime.runtime.exec("${suffix}${command}")
    String out = new BufferedReader(new InputStreamReader(p.inputStream)).lines().collect(Collectors.joining("\n"))
    int code = p.waitFor()

    return new ConsoleOutput(code, out)
}

class ConsoleOutput {
    int code
    String text

    ConsoleOutput(int code, String text){
        this.code = code
        this.text = text
    }
}
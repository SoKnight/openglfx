import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
}

allprojects {
    version = "3.0.4"
}

repositories {
    mavenCentral()
}

group 'com.huskerdev.openglfx'

// Natives variables for LWJGL and JFX
def os = OperatingSystem.current()
def osArch = System.getProperty("os.arch")
def arm64 = osArch.startsWith("aarch64") || osArch.startsWith("armv8")
def arm32 = osArch.startsWith("arm") && !arm64
def x64 = osArch.contains("64") && !arm32 && !arm64
def x86 = !x64 && !arm32 && !arm64

def lwjglArch = arm64? "-arm64" :arm32? "-arm32" :x64? "" :x86? "-x86" : ""
def lwjglOS = os.linux? "linux" :os.macOsX? "macos" :os.windows? "windows" : os.name
project.ext.lwjglNatives = "natives-${lwjglOS + lwjglArch}"

def joglArch = arm64? "-armv6hv" :arm32? "-armv6" :x64? "-amd64" :x86? "-i586" : ""
def joglOS = os.linux? "linux" :os.macOsX? "macosx" :os.windows? "windows" : os.name
project.ext.joglShortOS = os.linux? "x11" :os.macOsX? "osx" :os.windows? "win" : os.name
project.ext.joglNatives = joglOS + (os.macOsX ? "-universal" : joglArch)

def jfxArch = arm64? "-aarch64" :arm32? "-arm32" :x64? "" :x86? "-x86" : ""
def jfxOS = os.linux? "linux" :os.macOsX? "mac" :os.windows? "win" : os.name
project.ext.jfxNatives = jfxOS + jfxArch


// Tasks
task compileJars {
    group 'release'
    doLast {
        Path out = Paths.get("$projectDir/build/libs")
        if(Files.exists(out.parent)) {
            Files.walk(out.parent)
                    .sorted(Comparator.reverseOrder())
                    .map { it.toFile() }
                    .forEach { it.delete() }
        }
        Files.createDirectory(out.parent)
        Files.createDirectory(out)

        Files.copy(Paths.get("$projectDir/core/build/libs/core-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-core-${version}.jar"), REPLACE_EXISTING)
        Files.copy(Paths.get("$projectDir/lwjgl/build/libs/lwjgl-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-lwjgl-${version}.jar"), REPLACE_EXISTING)
        Files.copy(Paths.get("$projectDir/jogl/build/libs/jogl-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-jogl-${version}.jar"), REPLACE_EXISTING)
    }
}
compileJars.dependsOn 'core:jar'
compileJars.dependsOn 'lwjgl:jar'
compileJars.dependsOn 'jogl:jar'

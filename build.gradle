import java.nio.file.*
import static java.nio.file.StandardCopyOption.*;

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
}

allprojects {
    version = "2.7.1"
}

repositories {
    mavenCentral()
}

group 'com.huskerdev.openglfx'

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

task compileAll {
    group 'release'
    doLast {
        Path out = Paths.get("$projectDir/build/libs")
        if(Files.exists(out.parent)) {
            Files.walk(out.parent)
                    .sorted(Comparator.reverseOrder())
                    .map { it.toFile() }
                    .forEach { it.delete() }
        }
        Files.createDirectory(out.parent)
        Files.createDirectory(out)

        Files.copy(Paths.get("$projectDir/core/build/libs/core-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-core-${version}.jar"), REPLACE_EXISTING)
        Files.copy(Paths.get("$projectDir/lwjgl/build/libs/lwjgl-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-lwjgl-${version}.jar"), REPLACE_EXISTING)
        Files.copy(Paths.get("$projectDir/jogl/build/libs/jogl-${version}.jar"), Paths.get("$projectDir/build/libs/openglfx-jogl-${version}.jar"), REPLACE_EXISTING)
    }
}
compileAll.dependsOn 'core:jar'
compileAll.dependsOn 'lwjgl:jar'
compileAll.dependsOn 'jogl:jar'
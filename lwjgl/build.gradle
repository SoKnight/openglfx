import org.gradle.internal.os.OperatingSystem

plugins {
    id 'org.jetbrains.kotlin.jvm'
}

repositories {
    mavenCentral()
}

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

sourceSets{
    examples {
        resources { srcDirs "src/examples/resources" }
        java {
            srcDirs 'src/examples/kotlin'
            compileClasspath += sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
        }
    }
}

dependencies {
    compileOnly project(':core')
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib"

    compileOnly "org.openjfx:javafx-base:$openjfx:win"
    compileOnly "org.openjfx:javafx-controls:$openjfx:win"
    compileOnly "org.openjfx:javafx-graphics:$openjfx:win"
    compileOnly "org.openjfx:javafx-swing:$openjfx:win"

    compileOnly platform("org.lwjgl:lwjgl-bom:3.3.0")

    compileOnly "org.lwjgl:lwjgl"
    compileOnly "org.lwjgl:lwjgl-glfw"
    compileOnly "org.lwjgl:lwjgl-opengl"
    compileOnly "org.lwjgl:lwjgl::$lwjglNatives"
    compileOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    compileOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"

    compileOnly files('../libs/javafx.graphics.win-es2.jar')
}